// =====COPYRIGHT=====
// github ssh copyright text123
// =====COPYRIGHT=====
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebServices.Copyright.WebApplication.CopyrightService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObjectResponseV1", Namespace="http://schemas.datacontract.org/2004/07/Srs.WebPlatform.WebServices.Copyright")]
    [System.SerializableAttribute()]
    public partial class ObjectResponseV1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Srs.WebPlatform.WebServices.Copyright.CopyrightService", ConfigurationName="CopyrightService.ICopyrightServiceV1")]
    public interface ICopyrightServiceV1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/CallFi" +
            "leHeaderEnforcement", ReplyAction="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/CallFi" +
            "leHeaderEnforcementResponse")]
        WebServices.Copyright.WebApplication.CopyrightService.ObjectResponseV1 CallFileHeaderEnforcement(string repositoryUrl, string copyrightText, string lstEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/IsProc" +
            "essing", ReplyAction="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/IsProc" +
            "essingResponse")]
        bool IsProcessing(string repositoryUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/IsExis" +
            "tRepository", ReplyAction="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/IsExis" +
            "tRepositoryResponse")]
        WebServices.Copyright.WebApplication.CopyrightService.ObjectResponseV1 IsExistRepository(string repositoryUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/CloneG" +
            "itHubRepo", ReplyAction="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/CloneG" +
            "itHubRepoResponse")]
        bool CloneGitHubRepo(string repositoryUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/CallFi" +
            "leHeaderTfs", ReplyAction="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/CallFi" +
            "leHeaderTfsResponse")]
        bool CallFileHeaderTfs(string projectName, string tfsPath, string copyrightText, string lstEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/GetWor" +
            "kingItemStatus", ReplyAction="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/GetWor" +
            "kingItemStatusResponse")]
        string GetWorkingItemStatus(string repositoryUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/IsExis" +
            "tSourcePath", ReplyAction="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/IsExis" +
            "tSourcePathResponse")]
        bool IsExistSourcePath(string sourcePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/GetTfs" +
            "SourceCode", ReplyAction="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/GetTfs" +
            "SourceCodeResponse")]
        void GetTfsSourceCode(string projectName, string tfsPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/SendEm" +
            "ailReport", ReplyAction="Srs.WebPlatform.WebServices.Copyright.CopyrightService/ICopyrightServiceV1/SendEm" +
            "ailReportResponse")]
        void SendEmailReport(string lstEmail, string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICopyrightServiceV1Channel : WebServices.Copyright.WebApplication.CopyrightService.ICopyrightServiceV1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CopyrightServiceV1Client : System.ServiceModel.ClientBase<WebServices.Copyright.WebApplication.CopyrightService.ICopyrightServiceV1>, WebServices.Copyright.WebApplication.CopyrightService.ICopyrightServiceV1 {
        
        public CopyrightServiceV1Client() {
        }
        
        public CopyrightServiceV1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CopyrightServiceV1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CopyrightServiceV1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CopyrightServiceV1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebServices.Copyright.WebApplication.CopyrightService.ObjectResponseV1 CallFileHeaderEnforcement(string repositoryUrl, string copyrightText, string lstEmail) {
            return base.Channel.CallFileHeaderEnforcement(repositoryUrl, copyrightText, lstEmail);
        }
        
        public bool IsProcessing(string repositoryUrl) {
            return base.Channel.IsProcessing(repositoryUrl);
        }
        
        public WebServices.Copyright.WebApplication.CopyrightService.ObjectResponseV1 IsExistRepository(string repositoryUrl) {
            return base.Channel.IsExistRepository(repositoryUrl);
        }
        
        public bool CloneGitHubRepo(string repositoryUrl) {
            return base.Channel.CloneGitHubRepo(repositoryUrl);
        }
        
        public bool CallFileHeaderTfs(string projectName, string tfsPath, string copyrightText, string lstEmail) {
            return base.Channel.CallFileHeaderTfs(projectName, tfsPath, copyrightText, lstEmail);
        }
        
        public string GetWorkingItemStatus(string repositoryUrl) {
            return base.Channel.GetWorkingItemStatus(repositoryUrl);
        }
        
        public bool IsExistSourcePath(string sourcePath) {
            return base.Channel.IsExistSourcePath(sourcePath);
        }
        
        public void GetTfsSourceCode(string projectName, string tfsPath) {
            base.Channel.GetTfsSourceCode(projectName, tfsPath);
        }
        
        public void SendEmailReport(string lstEmail, string msg) {
            base.Channel.SendEmailReport(lstEmail, msg);
        }
    }
}
